import speech_recognition as sr  #for recognitizing the speech
import webbrowser  #for opening websites
import pyttsx3   #for speak
# import musics  
import pywhatkit  #for play songs on youtube
import requests   #allow to use APIs easily
import google.generativeai as genai #for ai
from gtts import gTTS #for voice generation
import pygame #play the voice generated by gtts  
import os #interact with the operating system 
import time #used for increase active time
import re  #for finding specific word

r = sr.Recognizer()
engine = pyttsx3.init()
newsapi = ""   #NEWS_API
weatherapi = ""  #WEATHER_API

def speak_old(text):    
    engine.say(text)
    engine.runAndWait()

def speak(text):
     tts = gTTS(text)
     tts.save('temp.mp3')  
     

# Initialize pygame mixer
     pygame.mixer.init()

# Load the MP3 file 
     pygame.mixer.music.load("temp.mp3")  # Replace with your file name

# Play the MP3
     pygame.mixer.music.play()

# Keep the script running while the music plays
     while pygame.mixer.music.get_busy():
         pygame.time.Clock().tick(10)
     pygame.mixer.music.unload()
     os.remove("temp.mp3")     
  

def aiProcess(command):         #for ai answers
    genai.configure(api_key="") #GenAI_API

# Initialize the model
    model = genai.GenerativeModel(
       model_name="gemini-1.5-flash",  #model
       system_instruction="You are Lyra, a helpful and smart personal assistant like Alexa or Google Assistant. Give answers in simple words and tell the answer according to your user, like if he told you to keep it short then answer in short otherwise default"   #instructions on how it should behave
)

# Send a prompt
    response = model.generate_content(command)

# Print the response
    return response.text

def weather(city):
        url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={weatherapi}&units=metric"
        response = requests.get(url)
        data = response.json()

        if response.status_code == 200:
            temp = data['main']['temp']
            desc = data['weather'][0]['description']
            return f"The temperature in {city} is {temp} degrees Celsius with {desc}."
        else:
            return f"Sorry, I couldn't find the weather for {city}."


def processcommand(c):
    if "open google" in c.lower():
        speak("Opening google")
        webbrowser.open("https://google.com")   

    elif "open youtube" in c.lower():
        speak("Opening youtube")
        webbrowser.open("https://youtube.com")  

    elif "open facebook" in c.lower():
        speak("Opening facebook")
        webbrowser.open("https://facebook.com")  

    elif "open instagram" in c.lower():
        speak("Opening instagram")
        webbrowser.open("https://instagram.com/")  

    elif "open twitter" in c.lower():
        speak("Opening twitter")
        webbrowser.open("https://x.com/")  

    # elif c.lower().startswith("play"):
        # song = c.lower().split(" ")[1]         for musics.py (only plays limited songs)
    #     link = musics.music[song]
    #     webbrowser.open(link)

    elif c.lower().startswith("play"):
        match = re.search(r'play(?: the song)? (.+)', c.lower())   #searching for name of song
        if match :
            song = match.group(1).strip().strip('"').strip("'")  
            if "on spotify" in song:  
                song = song.replace("on spotify", "").strip()     #for any songs which can be played on Spotify
                speak(f"Playing {song} on Spotify.")
                query = f"https://open.spotify.com/search/{song.replace(' ', '%20')}"
                webbrowser.open(query)

            elif "on youtube" in song:
                song = song.replace("on youtube", "").strip()       #for any songs which can be played on YouTube!
                speak(f"Playing {song} on YouTube.")
                pywhatkit.playonyt(song)
            else :
                speak(f"Playing {song} on YouTube.")
                pywhatkit.playonyt(song)       #Youtube by default
    elif c.lower().startswith("open"):       
        match = re.search(r'open(?: the video of)? (.+)', c.lower())    #search for video
        if match :
            video = match.group(1).strip().strip('"').strip("'")
            speak(f"Opening {video} on Youtube.")
            pywhatkit.playonyt(video)

        else:
            speak("Please tell me the what to play.")

    elif "news" in c.lower():
        r = requests.get("https://newsapi.org/v2/top-headlines?country=us&apiKey=2fe926ed7b2740dca00da3d169baa085")
        if r.status_code == 200:
            data = r.json()  # Parse JSON response
            articles = data.get("articles", [])  # Get list of articles
            top_articles = articles[:5]

        speak("Here are the top news headlines:")
        for i, article in enumerate(top_articles, start=1):
            headline = article.get("title", "")
            speak(f"Headline {i}: {headline}")
        else:
            speak("Sorry, I couldn't fetch the news right now.")

    elif "weather" in c.lower():
        match = re.search(r"weather in ([a-zA-Z\s]+)", c)
        if match:
            city = match.group(1)
            weather_report = weather(city)
            speak(weather_report)
        else:
            speak("Please tell me the city name. For example, say 'weather in Kolkata'.")
    

    else:
        output = aiProcess(c)
        speak (output)              

if __name__ == "__main__":
    speak("Initializing Lyra.....")
    while True:
        # Listen for wake word "Lyra"
        # obtain audio from microphone
    
        try:
             with sr.Microphone() as source:
               print("Listening....")
               audio = r.listen(source, timeout=2, phrase_time_limit=1)
               print("Recognizing.....")
               word = r.recognize_google(audio)
             if word.lower() == "lyra":
               speak("Yes, I'm listening...")

               active_until = time.time() + 20  # Stay active for 20 seconds after each question
               while time.time() < active_until:
                    try:
                      with sr.Microphone() as source:
                            print("Lyra activated...")
                            r.adjust_for_ambient_noise(source, duration=0.5)
                            audio = r.listen(source, timeout=5, phrase_time_limit=5)
                            command = r.recognize_google(audio)
                            print(f"You said: {command}")
                            processcommand(command)

                            # Reset session timer after every valid command
                            active_until = time.time() + 20

                            # Optional: exit if user says "stop", "go to sleep", etc.
                            if "stop" in command.lower() or "sleep" in command.lower():
                                speak("Going to sleep.")
                                break

                    except sr.WaitTimeoutError:
                       print("No voice input. Still waiting...")
                    except sr.UnknownValueError:
                       print("Sorry, I didn't catch that.")
                    except Exception as e_inner:
                       print(f"Error during active session: {e_inner}")



        except Exception as e:
             print("error; {0}".format(e))